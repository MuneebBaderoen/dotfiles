" Enable relative line numbering
set number
" Enable current line number
set relativenumber
nnoremap ; :
nnoremap : ;

" ===========================================================================================================
" Plugins
" ===========================================================================================================
call plug#begin('~/.vim/plugged')
" General development plugins
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'svermeulen/vim-easyclip'
Plug 'jiangmiao/auto-pairs'

" Javascript plugins


" Clojure(Script) plugins
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

call plug#end()

" ===========================================================================================================
" Editor settings
" ===========================================================================================================
let mapleader = ","

" Set colour scheme to monokai
colorscheme monokai
" Set colour scheme for airline (powerline alternative)
let g:airline_theme='powerlineish'

" Highlight current line
" Set cursorline on by default. bind leader c to toggle
hi CursorLine   cterm=NONE ctermbg=237 ctermfg=NONE
nnoremap <Leader>c :set cursorline!<CR>
set cursorline

" Move lines up and down
" alt-j triangles move down, alt-k dots move up 
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" when in insert mode, press <F2> to go to
" paste mode, where you can paste mass data
" that won't be autoindented
set pastetoggle=<F2>            

" ===========================================================================================================
" Personal Keybindings
" ===========================================================================================================

" General ease of use
" Save on cmd-s. Iterm sending as ctrl s
noremap <C-S> :w<CR>
vnoremap <C-S> <C-C>:w<CR>
inoremap <C-S> <Esc>:w<CR>

" ===========================================================================================================
" Plugin Keybindings
" ===========================================================================================================

" Comment out visual selection
nnoremap  :Commentary<CR>
vnoremap  :Commentary<CR>
inoremap  :Commentary<CR>

" Nerd tree key bindings
noremap <Leader>k :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1

" CtrlP Fuzzy Finder
if executable('ag')
   " Use ag over grep
   set grepprg=ag\ --nogroup\ --nocolor

   " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
   " let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
   let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
   let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

   " ag is fast enough that CtrlP doesn't need to cache
   let g:ctrlp_use_caching = 0
endif

" multiple cursors
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-d>'
let g:multi_cursor_quit_key='<Esc>'

" Snippet configuration
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"" YouCompleteMe
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
