let mapleader = ","

" ===========================================================================================================
" Plugins
" ===========================================================================================================
" {{{
call plug#begin('~/.vim/plugged')
" General development plugins

Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline' "{{{
    " Set colour scheme for airline (powerline alternative)
    let g:airline_theme='powerlineish'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_tab_nr = 1
    let g:airline#extensions#tabline#show_tab_type = 1
    let g:airline#extensions#tabline#show_close_button = 0
    let g:airline#extensions#tabline#tab_min_count = 0
    let g:airline#extensions#tabline#buffer_min_count = 0
    let g:airline#extensions#tabline#formatter = 'unique_tail'
" }}}
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'svermeulen/vim-easyclip'
Plug 'jiangmiao/auto-pairs'
Plug 'airblade/vim-gitgutter'
" Plug 'ajh17/VimCompletesMe'
" Plug 'tpope/vim-unimpaired'
" Plug 'ervandew/supertab' "{{{
"     let g:SuperTabDefaultCompletionType = '<C-x><c-o>'
" " }}}
Plug 'neomake/neomake' "{{{
    "run neomake on the current file on every write:<Paste>
    autocmd! BufWritePost * Neomake
    let g:neomake_javascript_enabled_makers = ['eslint']
" }}}

" Javascript plugins
Plug 'ternjs/tern_for_vim', {'do': 'npm install'} "{{{
    let g:tern_show_argument_hints = 'on_hold'
    let g:tern_show_signature_in_pum = 1
" }}}"
Plug 'carlitux/deoplete-ternjs'
Plug 'pangloss/vim-javascript'
" Plug 'othree/javascript-libraries-syntax.vim'
Plug 'elzr/vim-json'
" Plug 'heavenshell/vim-jsdoc'
" Plug '1995eaton/vim-better-javascript-completion'

function! DoRemote(arg)
    UpdateRemotePlugins
endfunction

Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') } "{{{
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#omni#input_patterns = {}
    let g:deoplete#omni_patterns = {}
    autocmd CompleteDone * if pumvisible() == 0 | pclose | endif

    " Use tab as the autocomplete trigger
    " inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" }}}
Plug 'mxw/vim-jsx'

" https://github.com/SirVer/ultisnips/issues/710
Plug 'SirVer/ultisnips' "{{{
    let g:UltiSnipsEditSplit="vertical"
    let g:UltiSnipsSnippetDirectories = ['~/.config/nvim/UltiSnips', 'UltiSnips']
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" }}}
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } "{{{
    noremap <leader>k :NERDTreeToggle<cr>
    let NERDTreeChDirMode=1
    let NERDTreeHighlightCursorline=1
    let NERDTreeMapActivateNode='<space>'
    let NERDTreeMinimalUI=1
    let NERDTreeShowHidden=1
" }}}
Plug 'tpope/vim-commentary' "{{{
    nnoremap  :Commentary<cr>
    vnoremap  :Commentary<cr>
" }}}
Plug 'ctrlpvim/ctrlp.vim' "{{{
    noremap <C-b> :CtrlPBuffer<cr>
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
    let g:ctrlp_use_caching = 0

    " close prompt on backspace or <c-h>
    let g:ctrlp_brief_prompt = 1
    let g:ctrlp_switch_buffer = 'Et'

    let g:ctrlp_prompt_mappings = {
        \ 'PrtDeleteEnt()':       ['<C-d>'],
        \ }
" }}}"
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'
call plug#end()
" }}}
" ===========================================================================================================
" Editor settings
" ===========================================================================================================
" {{{

" Save whenever switching windows or leaving vim. This is useful when running
" the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! wa
" Trigger autoread when changing buffers or coming back to vim.
au FocusGained,BufEnter * :silent! !

set nobackup
set noswapfile
set autoread                    " automatically reload files changed outside of Vim
scriptencoding utf-8

set ignorecase
set smartcase

set clipboard=unnamed

" Indentation rules {{{
set tabstop=4                   " a tab is four spaces
set softtabstop=4               " when hitting <BS>, pretend like a tab is removed, even if spaces
set expandtab                   " expand tabs by default (overloadable per file type later)
set shiftwidth=4                " number of spaces to use for autoindenting
set shiftround                  " use multiple of shiftwidth when indenting with '<' and '>'
set backspace=indent,eol,start  " Backspace for dummies
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
" }}}

set nowrap                      " don't wrap lines
set list
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·
set scrolloff=5                 " keep 4 lines off the edges of the screen when scrolling

set relativenumber              " Enable relative line numbering
set number                      " Enable current line number

" set syntax colour scheme to monokai
colorscheme molokai

augroup omnifuncs
    autocmd filetype javascript setlocal omnifunc=tern#Complete
augroup end

augroup dotfiles
    autocmd BufNewFile,BufRead *.mustache* set syntax=html
    autocmd BufNewFile,BufRead *tmux.conf* set syntax=tmux
    autocmd BufNewFile,BufRead Brewfile set syntax=ruby
augroup end

" augroup BgHighlight
"     autocmd!
"     autocmd WinEnter * set cul
"     autocmd WinLeave * set nocul
" augroup END
" }}}
" ===========================================================================================================
" Personal Keybindings
" ===========================================================================================================
" {{{

" Edit and load .vimrc
nnoremap <leader>ve :tabedit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

" Clear the highlighted search results
nnoremap <leader>/ :nohlsearch<cr>

" Disable arrows. only noobs need arrows anyway
noremap <Up> :copen<cr>
noremap <Down> :cclose<cr>
noremap <Left> :cp<cr>
noremap <Right> :cn<cr>

" enables magic mode in regular expressions
" :help /magic
nnoremap / /\v
vnoremap / /\v

" Remap colon and semicolon, saves pressing shift
" everytime I need to enter command mode
" pretty sure i do that more than find next occurance
" of char on line (default semicolon behaviour)
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" when in insert mode, press <F2> to go to
" paste mode, where you can paste mass data
" that won't be autoindented
set pastetoggle=<F2>

" Move lines up and down
" M is Meta, ie. Alt
" nnoremap <M-j> :m .+1<cr>==
" nnoremap <M-k> :m .-2<cr>==
" inoremap <M-j> <Esc>:m .+1<cr>==gi
" inoremap <M-k> <Esc>:m .-2<cr>==gi
" vnoremap <M-j> :m '>+1<cr>gv=gv
" vnoremap <M-k> :m '<-2<cr>gv=gv

" Reselect previous selection after indenting
vnoremap > >gv
vnoremap < <gv

" General ease of use
" Save on cmd-s. Iterm sending as ctrl s
nnoremap <C-S> :w<cr>
vnoremap <C-S> <C-C>:w<cr>
inoremap <C-S> <Esc>:w<cr>

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" ctrl-h is sending backspace<BS> instead of ^H
" https://github.com/neovim/neovim/issues/2048
if has('nvim')
    nmap <BS> <C-h>
endif

"Switch between panels left and right.
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

" Jump 5 lines at a time. useful for keyboard scrolling the cursor. will
" eventually get rid of this and enable the panel switching
" noremap <S-j> 5j
" noremap <S-k> 5k

" Scroll horizontally 5 lines at a time
" one line just isnt enough
nnoremap zl z5l
nnoremap zh z5h

" Tab controls. Awesomeness engaged.
" Shift H and Shift L to switch tabs
nnoremap <S-T> :tabnew<cr>
nnoremap <S-W> :tabclose<cr>
nnoremap <S-H> :tabprevious<cr>
nnoremap <S-L> :tabnext<cr>

" Let escape leave terminal buffer
" Returns to normal mode, making all vim keybindings come back to life
" neovim only
if(has('nvim'))
    tnoremap <Esc> <C-\><C-n>
endif

" Scroll screen so tht cursor is in the center after searches
nnoremap n nzz
nnoremap N Nzz
" }}}

if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
endif
