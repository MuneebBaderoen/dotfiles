let mapleader = ","

" ===========================================================================================================
" Plugins
" ===========================================================================================================
" {{{
call plug#begin('~/.vim/plugged')
" General development plugins
"
Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline' "{{{
  let g:airline#extensions#tabline#enabled = 1
" }}}
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'svermeulen/vim-easyclip'
Plug 'jiangmiao/auto-pairs'
Plug 'airblade/vim-gitgutter'
Plug 'mkitt/tabline.vim'
" Plug 'majutsushi/tagbar'
" Plug 'vim-scripts/Gundo'
" Plug 'vim-scripts/ZoomWin'
Plug 'ajh17/VimCompletesMe'
Plug 'tpope/vim-unimpaired'
Plug 'neomake/neomake' "{{{
    "run neomake on the current file on every write:<Paste>
    autocmd! BufWritePost * Neomake
    let g:neomake_javascript_enabled_makers = ['eslint']
" }}}

" Javascript plugins
Plug 'ternjs/tern_for_vim', {'do': 'npm install'}
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'elzr/vim-json'
" Plug 'heavenshell/vim-jsdoc'
Plug '1995eaton/vim-better-javascript-completion'
" Plug 'mxw/vim-jsx'
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
let g:deoplete#enable_at_startup = 1

Plug 'SirVer/ultisnips', {'on': [] } "{{{
    let g:UltiSnipsEditSplit="vertical"
    " let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips']
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

    " inoremap <silent> <tab> <C-r>=LoadUltiSnips()<cr>

    function! LoadUltiSnips()
        let l:curpos = getcurpos()
        execute plug#load('ultisnips')
        call cursor(l:curpos[1], l:curpos[2])
        call UltiSnips#ExpandSnippet()
        return ""
    endfunction
" }}}
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } "{{{
    noremap <leader>k :NERDTreeToggle<CR>
    let NERDTreeChDirMode=1
    let NERDTreeHighlightCursorline=1
    let NERDTreeMapActivateNode='<space>'
    let NERDTreeMinimalUI=1
    let NERDTreeShowHidden=1
" }}}
Plug 'terryma/vim-multiple-cursors' "{{{
    let g:multi_cursor_use_default_mapping=0
    let g:multi_cursor_next_key='<C-d>'
    let g:multi_cursor_quit_key='<Esc>'
    let g:multi_cursor_normal_maps={'f': 1,'t': 1,'F': 1,'T': 1,'c': 1,'d': 1}
" }}}

Plug 'tpope/vim-fugitive' "{{{
    nnoremap <leader>gs :Gstatus<CR>
    nnoremap <leader>gb :Gblame<CR>
" }}}
Plug 'tpope/vim-commentary' "{{{
    nnoremap  :Commentary<CR>
    vnoremap  :Commentary<CR>
" }}}
Plug 'ctrlpvim/ctrlp.vim' "{{{
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
    let g:ctrlp_use_caching = 0
" }}}"
call plug#end()
" }}}
" ===========================================================================================================
" Editor settings
" ===========================================================================================================
" {{{

" Save whenever switching windows or leaving vim. This is useful when running
" the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! wa
" Trigger autoread when changing buffers or coming back to vim.
au FocusGained,BufEnter * :silent! !

set nobackup
set noswapfile
set autoread                    " automatically reload files changed outside of Vim
scriptencoding utf-8


" Folding rules {{{
set foldmethod=syntax
set foldlevelstart=0

let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML

au filetype vim set foldmethod=marker
" }}}

" Indentation rules {{{
set tabstop=4                   " a tab is four spaces
set softtabstop=4               " when hitting <BS>, pretend like a tab is removed, even if spaces
set expandtab                   " expand tabs by default (overloadable per file type later)
set shiftwidth=4                " number of spaces to use for autoindenting
set shiftround                  " use multiple of shiftwidth when indenting with '<' and '>'
set backspace=indent,eol,start  " Backspace for dummies
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too

" }}}

set nowrap                      " don't wrap lines
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·
set scrolloff=5                   " keep 4 lines off the edges of the screen when scrolling

" Set colour scheme to monokai
" Enable relative line numbering
set relativenumber
" Enable current line number
set number

" set syntax colour scheme
colorscheme monokai
" Set colour scheme for airline (powerline alternative)
let g:airline_theme='powerlineish'

" Highlight current line
" Set cursorline off by default. bind leader c to toggle
hi CursorLine   cterm=bold ctermbg=237 ctermfg=NONE
" set cursorline

" }}}
" ===========================================================================================================
" Personal Keybindings
" ===========================================================================================================
" {{{

" Edit and load .vimrc
nnoremap <leader>ve :tabedit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

nnoremap <leader>/ :nohlsearch<cr>

" Disable arrows. only noobs need arrows anyway
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" enables magic mode in regular expressions
" :help /magic
nnoremap / /\v
vnoremap / /\v

" recursive fold opening/closing as default
nnoremap za zA
nnoremap zA za


nnoremap <Leader>c :set cursorline!<CR>

" Remap colon and semicolon, saves pressing shift
" everytime I need to enter command mode
" pretty sure i do that more than find next occurance
" of char on line (default semicolon behaviour)
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" when in insert mode, press <F2> to go to
" paste mode, where you can paste mass data
" that won't be autoindented
set pastetoggle=<F2>            

" Move lines up and down
" M is Meta, ie. Alt
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Reselect previous selection after indenting
vnoremap > >gv
vnoremap < <gv

" General ease of use
" Save on cmd-s. Iterm sending as ctrl s
noremap <C-S> :w<CR>
vnoremap <C-S> <C-C>:w<CR>
inoremap <C-S> <Esc>:w<CR>

" Speed up scrolling of the viewport slightly
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" ctrl-h is sending backspace<BS> instead of ^H
" https://github.com/neovim/neovim/issues/2048
if has('nvim')
    nmap <BS> <C-h>
endif

"Switch between panels left and right.
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

" Jump 5 lines at a time. useful for keyboard scrolling the cursor. will
" eventually get rid of this and enable the panel switching
noremap <C-j> 5j
noremap <C-k> 5k

" Scroll horizontally 5 lines at a time
" one line just isnt enough
nnoremap zl z5l
nnoremap zh z5h

" Tab controls. Awesomeness engaged.
" Shift H and Shift L to switch tabs
nnoremap <S-T> :tabnew<CR>
nnoremap <S-W> :tabclose<CR>
nnoremap <S-H> :tabprevious<CR>
nnoremap <S-L> :tabnext<CR>


" }}}

if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
endif
